plugins {
    id 'java'
}

// Define project properties
ext {
    modID = "fair.examplemod"
    modName = "Example Mod"
    modVersion = "1.0"
    gameVersion = "0.26.1"
    modDescription = "Just an example mod"
    author = "Fair"
}

/**
 * When setting clientside to true, it means servers do not need this mod for clients to connect and vice versa.
 * IMPORTANT: If you set this to true, make sure that your mod does not add any content or do anything
 * that could cause clients and servers to desync. This includes registering any items, objects, tiles, packets etc.
 */
project.ext.clientside = false

/**
 * The other mod dependencies of this mod
 * Dependencies define the default load order of mods
 * Uncomment and configure these if your mod has dependencies
 */
//project.ext.modDependencies = ["other.modid1", "other.modid2"]
//project.ext.modOptionalDependencies = ["optional.modid1", "optional.modid2"]

// The path to the games install directory
project.ext.gameDirectory = "/home/killin/.local/share/Steam/steamapps/common/Necesse"

// =================================================
// ========== DO NOT EDIT BELOW THIS LINE ==========
// =================================================

project.ext.jarName = "${project.ext.modName.replace(" ", "")}-${project.ext.gameVersion}-${project.ext.modVersion}"

// Project setup
group = modID
version = modVersion

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

repositories {
    mavenCentral()
}

configurations {
    libDepends
}

sourceSets {
    main {
        output.resourcesDir = file("build/mod/resources/")
        java.destinationDirectory.set(file("build/mod/"))
        java {
            compileClasspath += configurations.libDepends
        }
    }
}
project.ext.buildLocation = "build/jar/"

tasks.named('compileJava') {
    options.encoding = 'UTF-8'
}

if (!file(gameDirectory + "/Necesse.jar").exists()) {
    throw new GradleException("Could not find game install directory. Make sure it is correct in build.gradle file.")
}

dependencies {
    implementation files(gameDirectory + "/Necesse.jar")
    implementation fileTree(dir: gameDirectory + "/lib/")
    implementation fileTree(dir: "./mods/") // Add all mods located in local mods folder

    // Add any third party library dependencies here
    // libDepends group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    // libDepends files("path/to/library/jar.jar")
}

// Tasks
task createAppID {
    group = "necesse"
    description = "Creates steam_appid.txt file"

    doLast {
        file("steam_appid.txt").text = "1169040"
    }
}

task createModInfoFile(type: JavaExec) {
    group = "necesse"
    description = "Creates the mod info file"

    classpath = files(gameDirectory + "/Necesse.jar")
    main = "CreateModInfoFile"

    args "-file", "${sourceSets.main.java.destinationDirectory.get()}/mod.info",
            "-id", modID,
            "-name", modName,
            "-version", modVersion,
            "-gameVersion", gameVersion,
            "-description", modDescription,
            "-author", author,
            "-clientside", clientside.toString(),
            "-dependencies", hasProperty("modDependencies") ? "[" + modDependencies.join(", ") + "]" : "",
            "-optionalDependencies", hasProperty("modOptionalDependencies") ? "[" + modOptionalDependencies.join(", ") + "]" : ""
}

// Makes compiling also create mod info file
tasks.named('classes').configure {
    dependsOn createModInfoFile
}

task buildModJar(type: Jar) {
    group = "necesse"
    description = "Generates the mod jar into the build folder"
    dependsOn 'classes'

    doFirst {
        fileTree(buildLocation).exclude("${jarName}.jar").visit { FileVisitDetails details ->
            delete details.file
        }
    }

    // Add mod output
    from sourceSets.main.output
    // Add the dependencies
    from configurations.libDepends.collect { it.isDirectory() ? it : zipTree(it) }

    archiveFileName.set("${jarName}.jar")
    destinationDirectory.set(file(buildLocation))
}

task runClient(type: JavaExec) {
    group = "necesse"
    description = "Run client with current mod"
    dependsOn(tasks.getByName('buildModJar'), createAppID)

    classpath = files(gameDirectory + "/Necesse.jar")
    main = "StartSteamClient"

    jvmArgs "-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC",
            "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"

    args "-dev", "-mod", buildLocation
}

task runDevClient(type: JavaExec) {
    group = "necesse"
    description = "Run client with current mod"
    dependsOn(tasks.getByName('buildModJar'), createAppID)

    classpath = files(gameDirectory + "/Necesse.jar")
    main = "StartSteamClient"

    jvmArgs "-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC",
            "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"

    args "-dev", "-mod", buildLocation
}

task runServer(type: JavaExec) {
    group = "necesse"
    description = "Run server with current mod"
    dependsOn 'buildModJar'

    classpath = files(gameDirectory + "/Server.jar")
    main = "StartDesktopServer"

    jvmArgs "-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC",
            "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"

    args "-mod", buildLocation
}